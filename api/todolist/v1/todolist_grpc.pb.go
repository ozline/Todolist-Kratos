// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: todolist/v1/todolist.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodolistClient is the client API for Todolist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodolistClient interface {
	// Add a todothings
	Add(ctx context.Context, in *AddTodoRequest, opts ...grpc.CallOption) (*AddTodoReply, error)
	// Show all todothings
	ShowAll(ctx context.Context, in *ShowAllTodoRequest, opts ...grpc.CallOption) (*TodoListReply, error)
	// Show KeyMatched todothings
	ShowKey(ctx context.Context, in *ShowKeyTodoRequest, opts ...grpc.CallOption) (*TodoListReply, error)
	// Delete a todothings
	Delete(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*DeleteTodoReply, error)
	// Update a todothings
	Update(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*UpdateTodoReply, error)
}

type todolistClient struct {
	cc grpc.ClientConnInterface
}

func NewTodolistClient(cc grpc.ClientConnInterface) TodolistClient {
	return &todolistClient{cc}
}

func (c *todolistClient) Add(ctx context.Context, in *AddTodoRequest, opts ...grpc.CallOption) (*AddTodoReply, error) {
	out := new(AddTodoReply)
	err := c.cc.Invoke(ctx, "/todolist.v1.Todolist/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todolistClient) ShowAll(ctx context.Context, in *ShowAllTodoRequest, opts ...grpc.CallOption) (*TodoListReply, error) {
	out := new(TodoListReply)
	err := c.cc.Invoke(ctx, "/todolist.v1.Todolist/ShowAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todolistClient) ShowKey(ctx context.Context, in *ShowKeyTodoRequest, opts ...grpc.CallOption) (*TodoListReply, error) {
	out := new(TodoListReply)
	err := c.cc.Invoke(ctx, "/todolist.v1.Todolist/ShowKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todolistClient) Delete(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*DeleteTodoReply, error) {
	out := new(DeleteTodoReply)
	err := c.cc.Invoke(ctx, "/todolist.v1.Todolist/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todolistClient) Update(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*UpdateTodoReply, error) {
	out := new(UpdateTodoReply)
	err := c.cc.Invoke(ctx, "/todolist.v1.Todolist/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodolistServer is the server API for Todolist service.
// All implementations must embed UnimplementedTodolistServer
// for forward compatibility
type TodolistServer interface {
	// Add a todothings
	Add(context.Context, *AddTodoRequest) (*AddTodoReply, error)
	// Show all todothings
	ShowAll(context.Context, *ShowAllTodoRequest) (*TodoListReply, error)
	// Show KeyMatched todothings
	ShowKey(context.Context, *ShowKeyTodoRequest) (*TodoListReply, error)
	// Delete a todothings
	Delete(context.Context, *DeleteTodoRequest) (*DeleteTodoReply, error)
	// Update a todothings
	Update(context.Context, *UpdateTodoRequest) (*UpdateTodoReply, error)
	mustEmbedUnimplementedTodolistServer()
}

// UnimplementedTodolistServer must be embedded to have forward compatible implementations.
type UnimplementedTodolistServer struct {
}

func (UnimplementedTodolistServer) Add(context.Context, *AddTodoRequest) (*AddTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTodolistServer) ShowAll(context.Context, *ShowAllTodoRequest) (*TodoListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAll not implemented")
}
func (UnimplementedTodolistServer) ShowKey(context.Context, *ShowKeyTodoRequest) (*TodoListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowKey not implemented")
}
func (UnimplementedTodolistServer) Delete(context.Context, *DeleteTodoRequest) (*DeleteTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTodolistServer) Update(context.Context, *UpdateTodoRequest) (*UpdateTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTodolistServer) mustEmbedUnimplementedTodolistServer() {}

// UnsafeTodolistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodolistServer will
// result in compilation errors.
type UnsafeTodolistServer interface {
	mustEmbedUnimplementedTodolistServer()
}

func RegisterTodolistServer(s grpc.ServiceRegistrar, srv TodolistServer) {
	s.RegisterService(&Todolist_ServiceDesc, srv)
}

func _Todolist_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodolistServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.v1.Todolist/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodolistServer).Add(ctx, req.(*AddTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todolist_ShowAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAllTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodolistServer).ShowAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.v1.Todolist/ShowAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodolistServer).ShowAll(ctx, req.(*ShowAllTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todolist_ShowKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowKeyTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodolistServer).ShowKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.v1.Todolist/ShowKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodolistServer).ShowKey(ctx, req.(*ShowKeyTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todolist_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodolistServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.v1.Todolist/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodolistServer).Delete(ctx, req.(*DeleteTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todolist_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodolistServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.v1.Todolist/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodolistServer).Update(ctx, req.(*UpdateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Todolist_ServiceDesc is the grpc.ServiceDesc for Todolist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Todolist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todolist.v1.Todolist",
	HandlerType: (*TodolistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Todolist_Add_Handler,
		},
		{
			MethodName: "ShowAll",
			Handler:    _Todolist_ShowAll_Handler,
		},
		{
			MethodName: "ShowKey",
			Handler:    _Todolist_ShowKey_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Todolist_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Todolist_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todolist/v1/todolist.proto",
}

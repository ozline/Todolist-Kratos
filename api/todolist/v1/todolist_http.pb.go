// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.2

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type TodolistHTTPServer interface {
	AddTodo(context.Context, *AddTodoRequest) (*AddTodoReply, error)
	DeleteTodo(context.Context, *DeleteTodoRequest) (*DeleteTodoReply, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserReply, error)
	ModifyTodo(context.Context, *ModifyTodoRequest) (*ModifyTodoReply, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserReply, error)
	ShowAllTodo(context.Context, *ShowAllTodoRequest) (*ShowAllTodoReply, error)
	ShowKeyTodo(context.Context, *ShowKeyTodoRequest) (*ShowKeyTodoReply, error)
}

func RegisterTodolistHTTPServer(s *http.Server, srv TodolistHTTPServer) {
	r := s.Route("/")
	r.POST("/api/user/register", _Todolist_RegisterUser0_HTTP_Handler(srv))
	r.POST("/api/user/login", _Todolist_LoginUser0_HTTP_Handler(srv))
	r.POST("/api/todo", _Todolist_AddTodo0_HTTP_Handler(srv))
	r.GET("/api/todo/all", _Todolist_ShowAllTodo0_HTTP_Handler(srv))
	r.GET("/api/todo/key", _Todolist_ShowKeyTodo0_HTTP_Handler(srv))
	r.DELETE("/api/todo/{id}", _Todolist_DeleteTodo0_HTTP_Handler(srv))
	r.PUT("/api/todo/{id}", _Todolist_ModifyTodo0_HTTP_Handler(srv))
}

func _Todolist_RegisterUser0_HTTP_Handler(srv TodolistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/todolist.v1.Todolist/RegisterUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterUser(ctx, req.(*RegisterUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterUserReply)
		return ctx.Result(200, reply)
	}
}

func _Todolist_LoginUser0_HTTP_Handler(srv TodolistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/todolist.v1.Todolist/LoginUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginUser(ctx, req.(*LoginUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginUserReply)
		return ctx.Result(200, reply)
	}
}

func _Todolist_AddTodo0_HTTP_Handler(srv TodolistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddTodoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/todolist.v1.Todolist/AddTodo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddTodo(ctx, req.(*AddTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddTodoReply)
		return ctx.Result(200, reply)
	}
}

func _Todolist_ShowAllTodo0_HTTP_Handler(srv TodolistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShowAllTodoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/todolist.v1.Todolist/ShowAllTodo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShowAllTodo(ctx, req.(*ShowAllTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShowAllTodoReply)
		return ctx.Result(200, reply)
	}
}

func _Todolist_ShowKeyTodo0_HTTP_Handler(srv TodolistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShowKeyTodoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/todolist.v1.Todolist/ShowKeyTodo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShowKeyTodo(ctx, req.(*ShowKeyTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShowKeyTodoReply)
		return ctx.Result(200, reply)
	}
}

func _Todolist_DeleteTodo0_HTTP_Handler(srv TodolistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTodoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/todolist.v1.Todolist/DeleteTodo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTodo(ctx, req.(*DeleteTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTodoReply)
		return ctx.Result(200, reply)
	}
}

func _Todolist_ModifyTodo0_HTTP_Handler(srv TodolistHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyTodoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/todolist.v1.Todolist/ModifyTodo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyTodo(ctx, req.(*ModifyTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyTodoReply)
		return ctx.Result(200, reply)
	}
}

type TodolistHTTPClient interface {
	AddTodo(ctx context.Context, req *AddTodoRequest, opts ...http.CallOption) (rsp *AddTodoReply, err error)
	DeleteTodo(ctx context.Context, req *DeleteTodoRequest, opts ...http.CallOption) (rsp *DeleteTodoReply, err error)
	LoginUser(ctx context.Context, req *LoginUserRequest, opts ...http.CallOption) (rsp *LoginUserReply, err error)
	ModifyTodo(ctx context.Context, req *ModifyTodoRequest, opts ...http.CallOption) (rsp *ModifyTodoReply, err error)
	RegisterUser(ctx context.Context, req *RegisterUserRequest, opts ...http.CallOption) (rsp *RegisterUserReply, err error)
	ShowAllTodo(ctx context.Context, req *ShowAllTodoRequest, opts ...http.CallOption) (rsp *ShowAllTodoReply, err error)
	ShowKeyTodo(ctx context.Context, req *ShowKeyTodoRequest, opts ...http.CallOption) (rsp *ShowKeyTodoReply, err error)
}

type TodolistHTTPClientImpl struct {
	cc *http.Client
}

func NewTodolistHTTPClient(client *http.Client) TodolistHTTPClient {
	return &TodolistHTTPClientImpl{client}
}

func (c *TodolistHTTPClientImpl) AddTodo(ctx context.Context, in *AddTodoRequest, opts ...http.CallOption) (*AddTodoReply, error) {
	var out AddTodoReply
	pattern := "/api/todo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/todolist.v1.Todolist/AddTodo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TodolistHTTPClientImpl) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...http.CallOption) (*DeleteTodoReply, error) {
	var out DeleteTodoReply
	pattern := "/api/todo/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/todolist.v1.Todolist/DeleteTodo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TodolistHTTPClientImpl) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...http.CallOption) (*LoginUserReply, error) {
	var out LoginUserReply
	pattern := "/api/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/todolist.v1.Todolist/LoginUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TodolistHTTPClientImpl) ModifyTodo(ctx context.Context, in *ModifyTodoRequest, opts ...http.CallOption) (*ModifyTodoReply, error) {
	var out ModifyTodoReply
	pattern := "/api/todo/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/todolist.v1.Todolist/ModifyTodo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TodolistHTTPClientImpl) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...http.CallOption) (*RegisterUserReply, error) {
	var out RegisterUserReply
	pattern := "/api/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/todolist.v1.Todolist/RegisterUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TodolistHTTPClientImpl) ShowAllTodo(ctx context.Context, in *ShowAllTodoRequest, opts ...http.CallOption) (*ShowAllTodoReply, error) {
	var out ShowAllTodoReply
	pattern := "/api/todo/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/todolist.v1.Todolist/ShowAllTodo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TodolistHTTPClientImpl) ShowKeyTodo(ctx context.Context, in *ShowKeyTodoRequest, opts ...http.CallOption) (*ShowKeyTodoReply, error) {
	var out ShowKeyTodoReply
	pattern := "/api/todo/key"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/todolist.v1.Todolist/ShowKeyTodo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
